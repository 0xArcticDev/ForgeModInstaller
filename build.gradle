buildscript {
    repositories {
        jcenter()
        maven {
            name "forge"
            url "https://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath group: "net.minecraftforge.gradle", name: "ForgeGradle", version: "3.+", changing: true
    }
}

plugins {
    id 'org.ajoberstar.grgit' version '3.1.1'
    id "com.matthewprenger.cursegradle" version '1.3.0'
    id 'java'
    id 'idea'
    id 'maven'
    id 'maven-publish'
}

defaultTasks 'fullBuild'

idea {
    module {
        //TODO: sourceDirs??
        // For some reason this is necessary for IDEA 2014 workspaces to recognize assets
        inheritOutputDirs = true
    }
}

apply plugin: 'net.minecraftforge.gradle'

sourceSets {
    api {
        java {
            srcDir 'src/api/java'
        }
    }
    main {
        compileClasspath += sourceSets.api.output
        runtimeClasspath += sourceSets.api.output
    }
    generators {
        java {
            srcDir 'src/generators/java'
        }
        compileClasspath += sourceSets.api.output
        compileClasspath += sourceSets.main.output
        //TODO: Do the runtime paths need to be added
    }
    tools {
        java {
            srcDir 'src/tools/java'
        }
        compileClasspath += sourceSets.api.output
        compileClasspath += sourceSets.main.output
        //TODO: Do the runtime paths need to be added
    }
}

configurations {
    apiCompile.extendsFrom(compile)
    generatorsCompile.extendsFrom(compile)
    toolsCompile.extendsFrom(compile)
}

repositories {
    maven {
        name 'ForgeFS'
        url 'https://files.minecraftforge.net/maven'
    }
    maven {
        name 'amadornes'
        url 'https://maven.amadornes.com/'
    }
    maven {
        name 'prog'
        url 'http://dvs1.progwml6.com/files/maven'
    }
    maven {
        name 'curseforge'
        url 'https://minecraft.curseforge.com/api/maven/'
    }
    maven {
        name 'opencomputers'
        url 'http://maven.cil.li/'
    }
    maven {
        name 'hwyla'
        url 'https://tehnut.info/maven'
    }
    maven {
        name 'buildcraft'
        url 'https://mod-buildcraft.com/maven/'
    }
    maven {
        name 'tterrag'
        url 'https://maven.tterrag.com/'
    }
    maven {
        name 'ic2'
        url 'http://maven.ic2.player.to'
    }
    maven {
        name 'BlameJared - Crafttweaker'
        url 'https://maven.blamejared.com/'
    }
    maven {
        name 'thiakil'
        url 'https://maven.thiakil.com'
    }
}

group = "mekanism"
version = "${minecraft_version}-${mod_version}." + (System.env.BUILD_NUMBER ?: "homebaked")
archivesBaseName = "MekanismAll"
sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8

def explodedVersion = mod_version.split("\\.")

minecraft {
    mappings channel: "snapshot", version: "${mappings_version}"

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    /*version = "${minecraft_version}-${forge_version}"
    mappings = "${mappings_version}"
    runDir = "run"
    useDepAts = true*/

    /*replace '${version}', project.version
    replace 'new Version(999, 999, 999)', "new Version(${explodedVersion[0]}, ${explodedVersion[1]}, ${explodedVersion[2]})"
    replaceIn "Mekanism.java"
    replaceIn "MekanismGenerators.java"
    replaceIn "MekanismTools.java"*/
    runs {
        client {
            workingDirectory project.file("run")

            mods {
                mekanism {
                    source sourceSets.main
                    source sourceSets.api
                }
                mekanismgenerators {
                    source sourceSets.generators
                }
                mekanismtools {
                    source sourceSets.tools
                }
            }
        }

        server {
            workingDirectory project.file("run")

            mods {
                mekanism {
                    source sourceSets.main
                    source sourceSets.api
                }
                mekanismgenerators {
                    source sourceSets.generators
                }
                mekanismtools {
                    source sourceSets.tools
                }
            }
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    compileOnly "org.jetbrains:annotations:${jb_annotations}"

    compileOnly "mezz.jei:jei-${minecraft_version}:${jei_version}:api"
    runtime "mezz.jei:jei-${minecraft_version}:${jei_version}"
    compileOnly "mcjty.theoneprobe:TheOneProbe-1.14:${top_version}:api"
    compileOnly "mcp.mobius.waila:Hwyla:${hwyla_version}:api"

    //TODO: Use proper CrT dependency if this is not the path for maven
    compileOnly "com.blamejared.crafttweaker:CraftTweaker:1.14.4-5.0.0.56"

    // Not updated yet
    /*deobfCompile "MCMultiPart2:MCMultiPart:${mcmp_version}"
    compileOnly "inventory-tweaks:InventoryTweaks:${invtweak_version}:api"
    compileOnly "li.cil.oc:OpenComputers:MC${minecraft_version}-${opencomputers_version}:api"
    compileOnly "com.mod-buildcraft:buildcraft-api:${buildcraft_version}"
    compileOnly "team.chisel.ctm:CTM:MC${minecraft_version}-${ctm_version}:api"
    runtime "team.chisel.ctm:CTM:MC${minecraft_version}-${ctm_version}"
    compileOnly "net.industrial-craft:industrialcraft-2:${ic2_version}:api"
    compileOnly("CraftTweaker2:CraftTweaker2-API:${crafttweaker_version}") {
        exclude module: "asm-debug-all"
    }
    deobfCompile("CraftTweaker2:CraftTweaker2-MC1120-Main:1.12-${crafttweaker_version}") {
        exclude module: "asm-debug-all"
    }
    compileOnly "dan200.computercraft:ComputerCraft:${computercraft_version}:api"
    compileOnly("appeng:appliedenergistics2:${ae2_version}:api") {
        exclude module: "jei_1.12.2"
    }*/
}

processResources {
    inputs.property "version", project.version
    inputs.property "mc_version", minecraft_version

    from(sourceSets.main.resources.srcDirs) {
        include "mcmod.info"

        // replace version and mcversion
        expand "version": project.version, "mc_version": minecraft_version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
        exclude '**/*.blend*'
    }
    //rename '(.+_at.cfg)', 'META-INF/$1'
}
/*
def setMainManifestProps = { Manifest manifest->
    manifest.attributes (
            'FMLAT': 'mekanism_at.cfg'
    )
}

jar {
    manifest(setMainManifestProps)
}*/

//TODO: Do this stuff properly
jar {
    manifest {
        attributes([
                "Specification-Title"     : "mekanism",
                "Specification-Vendor"    : "mekanism",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "mekanism",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

//TODO: Sources Jar

task coreJar(type: Jar) {
    archiveName = "Mekanism-${project.version}.jar"
    dependsOn 'reobfJar'
    classifier "core"
    from sourceSets.main.output

    /*from('etc/core') {
        include '*.info'
        expand 'version':project.version,'mc_version':minecraft_version,'mcmp_version':mcmp_version
    }

    from zipTree(jar.outputs.getFiles().getSingleFile()).matching {
        exclude 'mekanism/tools/**', 'mekanism/generators/**', 'assets/mekanismtools/**', 'assets/mekanismgenerators/**', 'mcmod.info'
    }

    manifest(setMainManifestProps)*/
}

task toolsJar(type: Jar) {
    archiveName = "MekanismTools-${project.version}.jar"
    dependsOn 'reobfJar'
    classifier "tools"
    from sourceSets.tools.output

    /*from('etc/tools') {
        include '*.info'
        expand 'version':project.version,'mc_version':minecraft_version,'mcmp_version':mcmp_version
    }

    from zipTree(jar.outputs.getFiles().getSingleFile()).matching {
        include 'mekanism/tools/**', 'assets/mekanismtools/**'
    }*/
}

task generatorsJar(type: Jar) {
    archiveName = "MekanismGenerators-${project.version}.jar"
    dependsOn 'reobfJar'
    classifier "generators"
    from sourceSets.generators.output

    /*from('etc/generators') {
        include '*.info'
        expand 'version':project.version,'mc_version':minecraft_version,'mcmp_version':mcmp_version
    }

    from zipTree(jar.outputs.getFiles().getSingleFile()).matching {
        include 'mekanism/generators/**', 'assets/mekanismgenerators/**'
    }*/
}

task apiJar(type: Jar) {
    from sourceSets.api.output
    classifier "api"
    /*baseName "Mekanism"
    dependsOn "sourceMainJava"
    include 'mekanism/api/**'
    from sourceSets.main.java.srcDirs
    from sourceSets.main.output*/
}

artifacts {
    archives apiJar
    archives coreJar
    archives generatorsJar
    archives toolsJar
}

task fullBuild(type: Delete) {
    delete jar
    dependsOn "build"
}

uploadArchives {
    if(System.getenv("LOCAL_MAVEN") != null) {
        repositories {
            mavenDeployer {
                repository(url: "file://"+System.getenv("LOCAL_MAVEN"))
                pom {
                    groupId = project.group
                    version = project.version
                    if (System.getenv("MAVEN_ARTIFACT") != null) {
                        artifactId = System.getenv("MAVEN_ARTIFACT")
                    } else {
                        artifactId = "Mekanism"
                    }
                    project {
                        name = "Mekanism"
                        packaging 'jar'
                        description 'Mekanism is a Minecraft add-on featuring high-tech machinery that can be used to create powerful tools, armor, and weapons.'
                        url 'http://aidancbrady.com/mekanism/'
                        scm {
                            url 'https://github.com/mekanism-mod/Mekanism.git'
                        }
                        issueManagement {
                            system 'github'
                            url 'https://github.com/mekanism-mod/Mekanism/issues'
                        }
                        licenses {
                            license {
                                name = 'MIT'
                                distribution 'repo'
                            }
                        }
                    }
                }
            }
        }
    }
}

tasks.curseforge.dependsOn coreJar, toolsJar, generatorsJar, apiJar

if (System.getenv("CURSEFORGE_KEY") != null || project.hasProperty('curseforgeKey')) {
    println "Enabling Curseforge config"
    curseforge {
        apiKey = System.getenv("CURSEFORGE_KEY") ?: project.findProperty("curseforgeKey")

        def generatedChangelog = "Unable to generate changelog :("
        def currentCommit = System.getenv("GIT_COMMIT")
        def prevCommit = System.getenv("GIT_PREVIOUS_SUCCESSFUL_COMMIT") ?: System.getenv("GIT_PREVIOUS_COMMIT")

        if (currentCommit != null && prevCommit != null) {
            generatedChangelog = "<pre>"
            grgit.log {
                range(prevCommit, currentCommit)
            }.reverse().each { commit ->
                String message = commit.shortMessage
                if (!message.startsWith("Merge branch") && !message.startsWith("Merge pull request")) {//Ignore PRs and Merges
                    message = message.replaceAll("#(\\d+)", {match->//turn issues/prs into links (github currently supports prs being linked as issues)
                        return "<a href=\"https://github.com/mekanism-mod/Mekanism/issues/${match[1]}\">${match[0]}</a>"
                    })
                    generatedChangelog += "<a href=\"https://github.com/mekanism-mod/Mekanism/commit/${commit.id}\">${commit.getAbbreviatedId()}</a> - ${message}\n"
                }
            }
            generatedChangelog += "</pre>"
            println "Changelog generated"
        }

        def releaseNotesFile = project.file("docs/release_${mod_version}.html")
        if (releaseNotesFile.exists()){
            def releaseNotes = releaseNotesFile.getText()
            generatedChangelog = "$releaseNotes<br> $generatedChangelog"
        }

        //Core
        project {
            id = '268560'
            changelogType = "html"
            changelog = generatedChangelog
            // A file can also be set using: changelog = file('changelog.txt')
            releaseType = 'release'
            mainArtifact (coreJar){
                relations {
                    optionalDependency "jei"
                    optionalDependency "crafttweaker"
                    optionalDependency "industrial-craft"
                    optionalDependency "mcmultipart"
                    optionalDependency "tesla"
                    optionalDependency "cc-tweaked"
                    optionalDependency "the-one-probe"
                    optionalDependency "hwyla"
                    optionalDependency "applied-energistics-2"
                    optionalDependency "redstone-flux"
                    optionalDependency "metallurgy-4-reforged"
                    optionalDependency "opencomputers"
                    optionalDependency "cyclic"
                }
            }
            addArtifact apiJar
            addGameVersion '1.14.4'
        }

        //Generators
        project {
            id = '268566'
            changelogType = "html"
            changelog = generatedChangelog
            releaseType = 'release'
            mainArtifact(generatorsJar) {
                relations {
                    requiredDependency "mekanism"
                }
            }
            addGameVersion '1.14.4'
        }

        //Tools
        project {
            id = '268567'
            changelogType = "html"
            changelog = generatedChangelog
            releaseType = 'release'
            mainArtifact(toolsJar){
                relations {
                    requiredDependency "mekanism"
                }
            }
            addGameVersion '1.14.4'
        }
    }
}
